source('~/Desktop/INFO201/Homework/Info201FinalProject/SkiResortsAssignment.R')
# Gather information from API at https://developer.worldweatheronline.com/api/ski-weather-api.aspx
# Produce a data.table with all information discussed in proposal
##install.packages("gmapsdistance")
library(gmapsdistance)
library(dplyr)
library(jsonlite)
library(httr)
library(shiny)
library(knitr)
source("WorldWeatherOnlineAPIKey.R")
base.uri <- 'http://api.worldweatheronline.com/premium/v1/ski.ashx'
resource <- paste0('&key=', API_key, '&q=', long_lat, '&format=xml')
url.full <- paste0(base.uri, resource)
response <- GET(url.full)
response.content <- content(response, "text")
body.data <- fromJSON(response.content)
##•	Date for which the weather is forecasted
##•	Date for which the weather is forecasted
##•	Top, middle and bottom elevation weather forecasts
##•	Date for which the weather is forecasted
##•	Top, middle and bottom elevation weather forecasts
##•	Day max and min temperature in °C(Celsius) and °F(Fahrenheit)
##•	Date for which the weather is forecasted
##•	Top, middle and bottom elevation weather forecasts
##•	Day max and min temperature in °C(Celsius) and °F(Fahrenheit)
##•	Location specific sunrise and sunset, moonrise and moonset in the local time.
##•	Date for which the weather is forecasted
##•	Top, middle and bottom elevation weather forecasts
##•	Day max and min temperature in °C(Celsius) and °F(Fahrenheit)
##•	Location specific sunrise and sunset, moonrise and moonset in the local time.
##•	Hourly temperature in °C(Celsius)
##•	Date for which the weather is forecasted
##•	Top, middle and bottom elevation weather forecasts
##•	Day max and min temperature in °C(Celsius) and °F(Fahrenheit)
##•	Location specific sunrise and sunset, moonrise and moonset in the local time.
##•	Hourly temperature in °C(Celsius)
##•	Freezing Level in (meter)
##•	Date for which the weather is forecasted
##•	Top, middle and bottom elevation weather forecasts
##•	Day max and min temperature in °C(Celsius) and °F(Fahrenheit)
##•	Location specific sunrise and sunset, moonrise and moonset in the local time.
##•	Hourly temperature in °C(Celsius)
##•	Freezing Level in (meter)
##•	Expected Snowfall in (cm)
##•	Date for which the weather is forecasted
##•	Top, middle and bottom elevation weather forecasts
##•	Day max and min temperature in °C(Celsius) and °F(Fahrenheit)
##•	Location specific sunrise and sunset, moonrise and moonset in the local time.
##•	Hourly temperature in °C(Celsius)
##•	Freezing Level in (meter)
##•	Expected Snowfall in (cm)
##•	Chance of Snow in (%)
##•	Date for which the weather is forecasted
##•	Top, middle and bottom elevation weather forecasts
##•	Day max and min temperature in °C(Celsius) and °F(Fahrenheit)
##•	Location specific sunrise and sunset, moonrise and moonset in the local time.
##•	Hourly temperature in °C(Celsius)
##•	Freezing Level in (meter)
##•	Expected Snowfall in (cm)
##•	Chance of Snow in (%)
##•	Wind Speed in mph (miles per hour) and kmph (Kilometer per hour)
##•	Date for which the weather is forecasted
##•	Top, middle and bottom elevation weather forecasts
##•	Day max and min temperature in °C(Celsius) and °F(Fahrenheit)
##•	Location specific sunrise and sunset, moonrise and moonset in the local time.
##•	Hourly temperature in °C(Celsius)
##•	Freezing Level in (meter)
##•	Expected Snowfall in (cm)
##•	Chance of Snow in (%)
##•	Wind Speed in mph (miles per hour) and kmph (Kilometer per hour)
##•	16-Point compass wind direction
##•	Top, middle and bottom elevation weather forecasts
##•	Day max and min temperature in °C(Celsius) and °F(Fahrenheit)
##•	Location specific sunrise and sunset, moonrise and moonset in the local time.
##•	Hourly temperature in °C(Celsius)
##•	Freezing Level in (meter)
##•	Expected Snowfall in (cm)
##•	Chance of Snow in (%)
##•	Wind Speed in mph (miles per hour) and kmph (Kilometer per hour)
##•	16-Point compass wind direction
##•	A unique weather condition code
##•	Day max and min temperature in °C(Celsius) and °F(Fahrenheit)
##•	Location specific sunrise and sunset, moonrise and moonset in the local time.
##•	Hourly temperature in °C(Celsius)
##•	Freezing Level in (meter)
##•	Expected Snowfall in (cm)
##•	Chance of Snow in (%)
##•	Wind Speed in mph (miles per hour) and kmph (Kilometer per hour)
##•	16-Point compass wind direction
##•	A unique weather condition code
##•	Weather description text
##•	Location specific sunrise and sunset, moonrise and moonset in the local time.
##•	Hourly temperature in °C(Celsius)
##•	Freezing Level in (meter)
##•	Expected Snowfall in (cm)
##•	Chance of Snow in (%)
##•	Wind Speed in mph (miles per hour) and kmph (Kilometer per hour)
##•	16-Point compass wind direction
##•	A unique weather condition code
##•	Weather description text
##•	Weather symbol image URL
##•	Hourly temperature in °C(Celsius)
##•	Freezing Level in (meter)
##•	Expected Snowfall in (cm)
##•	Chance of Snow in (%)
##•	Wind Speed in mph (miles per hour) and kmph (Kilometer per hour)
##•	16-Point compass wind direction
##•	A unique weather condition code
##•	Weather description text
##•	Weather symbol image URL
##•	Precipitation in millimeter (mm)
##•	Freezing Level in (meter)
##•	Expected Snowfall in (cm)
##•	Chance of Snow in (%)
##•	Wind Speed in mph (miles per hour) and kmph (Kilometer per hour)
##•	16-Point compass wind direction
##•	A unique weather condition code
##•	Weather description text
##•	Weather symbol image URL
##•	Precipitation in millimeter (mm)
##•	Humidity in percentage (%)
##•	Expected Snowfall in (cm)
##•	Chance of Snow in (%)
##•	Wind Speed in mph (miles per hour) and kmph (Kilometer per hour)
##•	16-Point compass wind direction
##•	A unique weather condition code
##•	Weather description text
##•	Weather symbol image URL
##•	Precipitation in millimeter (mm)
##•	Humidity in percentage (%)
##•	Visibility in kilometer (km)
##•	Chance of Snow in (%)
##•	Wind Speed in mph (miles per hour) and kmph (Kilometer per hour)
##•	16-Point compass wind direction
##•	A unique weather condition code
##•	Weather description text
##•	Weather symbol image URL
##•	Precipitation in millimeter (mm)
##•	Humidity in percentage (%)
##•	Visibility in kilometer (km)
##•	Pressure in millibar (mb)
##•	Wind Speed in mph (miles per hour) and kmph (Kilometer per hour)
##•	16-Point compass wind direction
##•	A unique weather condition code
##•	Weather description text
##•	Weather symbol image URL
##•	Precipitation in millimeter (mm)
##•	Humidity in percentage (%)
##•	Visibility in kilometer (km)
##•	Pressure in millibar (mb)
##•	Cloud cover in percentage (%)
##•	16-Point compass wind direction
##•	A unique weather condition code
##•	Weather description text
##•	Weather symbol image URL
##•	Precipitation in millimeter (mm)
##•	Humidity in percentage (%)
##•	Visibility in kilometer (km)
##•	Pressure in millibar (mb)
##•	Cloud cover in percentage (%)
# Develop a scoring system for each resort at any given time, pulling current data from API
##•	A unique weather condition code
##•	Weather description text
##•	Weather symbol image URL
##•	Precipitation in millimeter (mm)
##•	Humidity in percentage (%)
##•	Visibility in kilometer (km)
##•	Pressure in millibar (mb)
##•	Cloud cover in percentage (%)
# Develop a scoring system for each resort at any given time, pulling current data from API
# Have some visual outputs or plots that we can place on a HTML document
##•	A unique weather condition code
##•	Weather description text
##•	Weather symbol image URL
##•	Precipitation in millimeter (mm)
##•	Humidity in percentage (%)
##•	Visibility in kilometer (km)
##•	Pressure in millibar (mb)
##•	Cloud cover in percentage (%)
# Develop a scoring system for each resort at any given time, pulling current data from API
# Have some visual outputs or plots that we can place on a HTML document
##•	A unique weather condition code
##•	Weather description text
##•	Weather symbol image URL
##•	Precipitation in millimeter (mm)
##•	Humidity in percentage (%)
##•	Visibility in kilometer (km)
##•	Pressure in millibar (mb)
##•	Cloud cover in percentage (%)
# Develop a scoring system for each resort at any given time, pulling current data from API
# Have some visual outputs or plots that we can place on a HTML document
##•	A unique weather condition code
##•	Weather description text
##•	Weather symbol image URL
##•	Precipitation in millimeter (mm)
##•	Humidity in percentage (%)
##•	Visibility in kilometer (km)
##•	Pressure in millibar (mb)
##•	Cloud cover in percentage (%)
# Develop a scoring system for each resort at any given time, pulling current data from API
# Have some visual outputs or plots that we can place on a HTML document
##•	A unique weather condition code
##•	Weather description text
##•	Weather symbol image URL
##•	Precipitation in millimeter (mm)
##•	Humidity in percentage (%)
##•	Visibility in kilometer (km)
##•	Pressure in millibar (mb)
##•	Cloud cover in percentage (%)
# Develop a scoring system for each resort at any given time, pulling current data from API
# Have some visual outputs or plots that we can place on a HTML document
shinyApp(ui = ui, server = server)
source('~/Desktop/INFO201/Homework/Info201FinalProject/SkiResortsAssignment.R')
# Gather information from API at https://developer.worldweatheronline.com/api/ski-weather-api.aspx
# Produce a data.table with all information discussed in proposal
##install.packages("gmapsdistance")
library(gmapsdistance)
source('~/Desktop/INFO201/Homework/Info201FinalProject/SkiResortsAssignment.R')
source('~/Desktop/INFO201/Homework/Info201FinalProject/WorldWeatherOnlineAPIKey.R')
source('~/Desktop/INFO201/Homework/Info201FinalProject/SkiResortsAssignment.R')
## Get the data from the API and paste it into a data table
data <- xmlParse(paste0("http://api.worldweatheronline.com/premium/v1/ski.ashx?key=", API.Key, "&q=47.12,13.13&format=xml"))
body <- xmlToList(data)
ui <- fluidPage(
titlePanel("Ski Resort Planner"),
sidebarLayout(
sidebarPanel(
# User has the option to select which ski resort s/he would like to go to (more can be added here)
textInput("zipcode", "Enter your Zipcode"),
selectInput(
"resortChoice1", "Select ski resort:", choices = c("Snoqualmie Ski Resort", "Stevens Pass Ski Area" , "Mt. Baker" , "etc"), multiple = FALSE
),
selectInput(
"resortChoice2", "Select ski resort:", choices = c("Snoqualmie Ski Resort", "Stevens Pass Ski Area" , "Mt. Baker" , "etc"), multiple = FALSE
),
# To select color for graph
radioButtons(
"graphChoice", "Select What You Want To Be Graphed:", choices = c("Day max and min temperature in °C(Celsius) and °F(Fahrenheit)", "Hourly temperature in °C(Celsius)",
"Expected Snowfall in (cm)", "Chance of Snow in (%)", "Wind Speed", "Humidity in percentage (%)",
"Visibility in kilometer (km)"), selected = "black"
),
# Calender data selection interface
dateInput(
"date", label = h3("Date input"), value = "2018-03-06"
),
actionButton("update", "Update Info To Current Time") ## Have the Web API refresh the page with current weather forecasts
),
mainPanel(
tabsetPanel(type = "tab",
tabPanel("Expected snowfall", plotOutput("plot", width = "90%")),
tabPanel("Conditions",
tableOutput("table1"), tableOutput("table2"))
),
uiOutput("output")
)
)
)
server <- function(input, output) {
zip <- reactive({
input$zipcode
response <- GET("http://api.worldweatheronline.com/premium/v1/ski.ashx", query = list(q= zip, key = API.Key, format = "JSON"))
})
text <- content(response, "text")
body <- fromJSON(text)
dataframe <- as.data.frame(body)
moon_and_sun_td <- dataframe[[1,3]]
moon_and_sun_tm <- dataframe[[2,3]]
chance_of_snow_td <- dataframe[[1,5]]
chance_of_snow_tm <- dataframe[[2,5]]
weather_hourly_td <- dataframe[[1,7]]
weather_hourly_tm <- dataframe[[2,7]]
total_snowfall_td <- dataframe[[1,10]]
total_snowfall_tm <- dataframe[[2,10]]
user_input <- reactive({ input$resort })
output$output <- renderUI({
# if statement to select correct URL
if (identical(user_input(), "Snoqualmie Ski Resort")) {
link = "http://www.summitatsnoqualmie.com/"
} else if (identical(user_input(), "Stevens Pass Ski Area")) {
link = "https://www.stevenspass.com/site"
} else if (identical(user_input(), "Mt. Baker")) {
link = "http://www.mtbaker.us/"
} else {
link = "http://www.google.com"
}
url <- reactive({
a(paste(input$resort, "Homepage"), href=link)
})
# This adds a hyperlink to the correct webpage
tagList(paste("URL Link to "), url())
})
# Plot to visualize snowfall during the day (currently using example data, will need to replace with API data)
output$plot <- renderPlot({
plot(weather_hourly_td$humidity, type = "l", xlab = "Time", ylab = "Humidity", main = "Humidity During the Day", lwd = 2, xaxt = 'n')
axis(1, at=1:8, labels = weather_hourly_td$time)
})
}
View(ui)
source('~/Desktop/INFO201/Homework/Info201FinalProject/SkiResortsAssignment.R')
# Gather information from API at https://developer.worldweatheronline.com/api/ski-weather-api.aspx
# Produce a data.table with all information discussed in proposal
##install.packages("gmapsdistance")
library(gmapsdistance)
ui <- fluidPage(
titlePanel("Ski Resort Planner"),
sidebarLayout(
sidebarPanel(
# User has the option to select which ski resort s/he would like to go to (more can be added here)
textInput("zipcode", "Enter your Zipcode"),
selectInput(
"resortChoice1", "Select ski resort:", choices = c("Snoqualmie Ski Resort", "Stevens Pass Ski Area" , "Mt. Baker" , "etc"), multiple = FALSE
),
selectInput(
"resortChoice2", "Select ski resort:", choices = c("Snoqualmie Ski Resort", "Stevens Pass Ski Area" , "Mt. Baker" , "etc"), multiple = FALSE
),
# To select color for graph
radioButtons(
"graphChoice", "Select What You Want To Be Graphed:", choices = c("Day max and min temperature in °C(Celsius) and °F(Fahrenheit)", "Hourly temperature in °C(Celsius)",
"Expected Snowfall in (cm)", "Chance of Snow in (%)", "Wind Speed", "Humidity in percentage (%)",
"Visibility in kilometer (km)"), selected = "black"
),
# Calender data selection interface
dateInput(
"date", label = h3("Date input"), value = "2018-03-06"
),
actionButton("update", "Update Info To Current Time") ## Have the Web API refresh the page with current weather forecasts
),
mainPanel(
tabsetPanel(type = "tab",
tabPanel("Expected snowfall", plotOutput("plot", width = "90%")),
tabPanel("Conditions",
tableOutput("table1"), tableOutput("table2"))
),
uiOutput("output")
)
)
)
server <- function(input, output) {
zip <- reactive({
input$zipcode
response <- GET("http://api.worldweatheronline.com/premium/v1/ski.ashx", query = list(q= zip, key = API.Key, format = "JSON"))
})
text <- content(response, "text")
body <- fromJSON(text)
dataframe <- as.data.frame(body)
moon_and_sun_td <- dataframe[[1,3]]
moon_and_sun_tm <- dataframe[[2,3]]
chance_of_snow_td <- dataframe[[1,5]]
chance_of_snow_tm <- dataframe[[2,5]]
weather_hourly_td <- dataframe[[1,7]]
weather_hourly_tm <- dataframe[[2,7]]
total_snowfall_td <- dataframe[[1,10]]
total_snowfall_tm <- dataframe[[2,10]]
user_input <- reactive({ input$resort })
output$output <- renderUI({
# if statement to select correct URL
if (identical(user_input(), "Snoqualmie Ski Resort")) {
link = "http://www.summitatsnoqualmie.com/"
} else if (identical(user_input(), "Stevens Pass Ski Area")) {
link = "https://www.stevenspass.com/site"
} else if (identical(user_input(), "Mt. Baker")) {
link = "http://www.mtbaker.us/"
} else {
link = "http://www.google.com"
}
url <- reactive({
a(paste(input$resort, "Homepage"), href=link)
})
# This adds a hyperlink to the correct webpage
tagList(paste("URL Link to "), url())
})
# Plot to visualize snowfall during the day (currently using example data, will need to replace with API data)
output$plot <- renderPlot({
plot(weather_hourly_td$humidity, type = "l", xlab = "Time", ylab = "Humidity", main = "Humidity During the Day", lwd = 2, xaxt = 'n')
axis(1, at=1:8, labels = weather_hourly_td$time)
})
}
## Get the data from the API and paste it into a data table
data <- xmlParse(paste0("http://api.worldweatheronline.com/premium/v1/ski.ashx?key=", API.Key, "&q=47.12,13.13&format=xml"))
body <- xmlToList(data)
source('~/Desktop/INFO201/Homework/Info201FinalProject/SkiResortsAssignment.R')
source('~/Desktop/INFO201/Homework/Info201FinalProject/SkiResortsAssignment.R')
runApp('SkiResortsAssignment.R')
runApp('SkiResortsAssignment.R')
shinyApp(ui = my.ui, server = my.server)
runApp('SkiResortsAssignment.R')
runApp('SkiResortsAssignment.R')
runApp('SkiResortsAssignment.R')
runApp('SkiResortsAssignment.R')
runApp('SkiResortsAssignment.R')
runApp('SkiResortsAssignment.R')
runApp('SkiResortsAssignment.R')
runApp('SkiResortsAssignment.R')
runApp('SkiResortsAssignment.R')
runApp('SkiResortsAssignment.R')
runApp('SkiResortsAssignment.R')
runApp('SkiResortsAssignment.R')
runApp('SkiResortsAssignment.R')
runApp('SkiResortsAssignment.R')
runApp('SkiResortsAssignment.R')
runApp('SkiResortsAssignment.R')
runApp('SkiResortsAssignment.R')
runApp('SkiResortsAssignment.R')
runApp('SkiResortsAssignment.R')
runApp('SkiResortsAssignment.R')
runApp('SkiResortsAssignment.R')
runApp('SkiResortsAssignment.R')
runApp('SkiResortsAssignment.R')
runApp('SkiResortsAssignment.R')
runApp('SkiResortsAssignment.R')
runApp('SkiResortsAssignment.R')
runApp('SkiResortsAssignment.R')
runApp('SkiResortsAssignment.R')
runApp('SkiResortsAssignment.R')
runApp('SkiResortsAssignment.R')
library("shinythemes", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
runApp('SkiResortsAssignment.R')
runApp('SkiResortsAssignment.R')
runApp('SkiResortsAssignment.R')
library(shiny); runApp('SkiResortsAssignment.R')
library(shiny); runApp('SkiResortsAssignment.R')
runApp('SkiResortsAssignment.R')
library(shiny); runApp('SkiResortsAssignment.R')
runApp('SkiResortsAssignment.R')
library(shiny); runApp('SkiResortsAssignment.R')
library(shiny); runApp('SkiResortsAssignment.R')
library(shiny); runApp('SkiResortsAssignment.R')
library(shiny); runApp('SkiResortsAssignment.R')
library(shiny); runApp('SkiResortsAssignment.R')
library(shiny); runApp('SkiResortsAssignment.R')
